Stacks

Stacks are a linear data structure that follows a particular order in which the operations are performed.
- The order may be LIFO or FILO

Basic Stack Operations:
- Push: Adds an item in the stack. If the stack is full, then it is said to be an Overflow condition.
- Pop: Removes an item from the stack. The items are popped in the reversed order in which they are
       pushed. If the stack is empty , then it is said to be an Underflow condition.
- Peek or Top: Return the top element of the stack.
- isEmpty: Returns true if the stack is empty, else false.

Understanding a stack practically:
- A stack of plates, the plate at the top is the first to be removed from the stack.

Time Complexities:
- push(), pop(), isEmpty(), and peek() all take O(1).

Implementation:
1. Array
    a. Pros: Easy to implement. Memory is saved as pointers are not involved.
    b. Cons: It is not dynamic. It doesn't grow and shrink depending on needs at runtime.
2. Linked List
    a. Pros: The linked list implementation of a stack can grow and shrink according to the needs at runtime.
    b. Cons: Require extra memory due to involvement of pointers.