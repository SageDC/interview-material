Linked Lists

Linked Lists are a linear data structure, but elements are not stored at a contiguous location; the elements are linked using pointers.

Why Linked List?
1.) Dynamic size
2.) Ease of insertion/deletion

Drawbacks
1.) Random access is not allowed. Must always begin at the first node.
2.) Extra mnemory space for a pointer is required with each element of the list.
3.) Not cache friendly, locality of reference is not present.

Representation
- Represented by a pointer to the first node of the linked list. 
- The first node is called the head.
- If empty, the head points to NULL.
- Each node:
    1.) data (can store any type of data)
    2.) pointer (reference) to the next node (connects one node to another)
    3.) Example:
        ```c++
            class Node {
                public:
                    int data;
                    Node* next;
            };
        ```

        ```python
            # Node class
            class Node:
                # Function to initialize the node object
                def __init__(self, data):
                    self.data = data # assign data
                    self.next = None # Initialize next as NULL

            # Linked List class
            class LinkedList:
                #Function to initialize the Linked List object
                def __init__(self):
                    self.head = None
        ```

A node can be added into a linked list in 3 different ways:
1.) At the front of the linked list.
    ```c++
        /* Given a reference (pointer to pointer) to the head of a list and an int, inserts a new node on the fronmt of the list */
        // Time complexity: O(1) as it does a constant amount of work
        void push(Node** head_ref, int new_data) {
            // 1. allocate the new node 
            Node* new_node = new Node();
            // 2. put in the data
            new_node->data = new_data;
            // 3. make next of new node as head
            new_node->next = (*head_ref)
            // 4. move the head to point to the new node
            (*head_ref) = new_node
        }
    ```
2.) After a given node.
    ```c++
        /* Given a node prev_node, insert a new node after the given prev_node */
        // Time complexity: O(1) as it does a constant amount of work
        void insertAfter(Node* prev_node, int new_data) {
            // 1.) Check if the given prev_node is NULL
            if (prev_node == NULL) {
                cout << "The given previous node cannot be NULL";
                return;
            }
            // 2.) allocate the new node
            Node* new_node = new Node();
            // 3.) Put in the data
            new_node->data = new_data;
            // 4.) Make next of new node as next of prev_node
            new_node->next = prev_node->next;
            // 5.) move the next of prev_node as new_node
            prev_node->next = new_node;
        }
    ```
3.) At the end of the linked list.
    ```c++
        /* Given a reference (pointer to pointer) to the head of a list and an int, appends a new node at the end */
        // Time complexity: O(n) but can be optimized to O(1) by keep an extra pointer for the tail of the linked list
        void append(Node** head_ref, int new_data) {
            // 1. allocate node
            Node* new_node = new Node()
            // 2. Put in the data
            new_node->data = new_data;
            // 3. This new node is going to be the last node, so make next of it as NULL
            new_node->next = NULL;
            // 4. If the linked list is empty, then make the new node as head
            if (*head_ref == NULL) {
                *head_ref = new_node;
                return;
            }
            // 5. Else traverse till the last node
            Node* last = *head_ref;
            while (last->next != NULL) {
                last = last->next;
            }
            // 6. Change the next of last node
            last->next = new_node;
            return;
        }
    ```

Deleting a node (Given a key, delete the first occurence of the key in the linked list)
Iterative Method:
1.) Find the previous node of the node to be deleted
2.) Change the next of the previous node
3.) Free memory of the node to be deleted
    ```c++
        /* given a reference (pointer to pointer) to the head of a list and a key, deletes the first occurence of key in linked list */
        void deleteNode(Node** head_ref, int key) {
            // store head node
            Node* temp = *head_ref;
            Node* prev = NULL;

            // if head node itself holds the key to be deleted
            if (temp != NULL && temp->data == key) {
                *head_ref = temp->next; // changed head
                delete temp;
                return;
            }
            // else search for the key to be deleted, keep track of the previous node as we need to change prev->next
            else {
                while (temp != && temp->data != key) {
                    prev = temp;
                    temp = temp->next;
                }
                // If key was not present in linked list
                if (temp == NULL) {
                    return;
                }
                // unlink the node from linked list
                prev->next = temp->next;
                // free memory
                delete temp;
            }
        }
    ```

Recursive Method:
1.) We pass node* (node pointer) as a reference to the function (as in node* &head)
2.) Now since the current node pointer is derived from the previous node's next (which is passed by reference)
    so now if the value of the current node pointer is changed, the previous next node's value also gets changed
    which is the required operation while deleting a node (i.e. points previous nodes next to current node'search
    (containing key) next).
3.) Find the node containing the given value.
4.) Store this node to deallocate it later using the free() function.
5.) Change the node pointer so that it points to its next and by performing this previous node's next also gets properly linked.
```c++
    void deleteNode(Node*& head, int key) {
        // check if the list is empty or we reached the end of the list
        if (head == NULL) {
            cout << "Element not present in the list\n";
            return;
        }
        // if current node is the node to be deleted
        if (head->data == key) {
            Node* temp = head;
            // if its start of the node head then the node points to second node
            head = head->next;
            delete(temp);
            return;
        }
        deleteNode(head->next, key)
    }
```

Deleting a linked list node at a given position
- If the nde to be deleted is the root, simply delete it. To delete a middle node,
  we must have a pointer to the node previous to the node to be deleted. So if
  positions are not zero, we run a loop position-1 times and get a pointer to the
  previous node.
  ```c++
    /* Given a reference (pointer to pointer) to the head of a list and a position,
    deletes the node at the given position */
    void delNodeAtPos(Node** head_ref, int position) {
        // if linked list is empty
        if (*head_ref == NULL) {
            return;
        }

        // store head node
        Node* temp = *head_ref;

        // if head needs to be removed
        if (position == 0) {
            // change head
            *head_ref = temp->next;

            // free old head
            free(temp);
            return;
        }

        // find previous node of the node to be deleted
        for (int i = 0; temp != NULL && i < position - 1; i++) {
            temp = temp->next;
        }

        // if position is more than number of nodes
        if (temp == NULL || temp->next == NULL) {
            return;
        }

        // Node temp->next is the node to be deleted
        // Store pointer to the next of node to be deleted
        Node* next = temp->next->next;

        // unlink the node from linked list
        free(temp->next);

        // unlink the deleted node from list
        temp->next = next;
    }
```

Deleting an entire linked list
```c++
    /* Function to delete the entire linked list. */
    void deleteList(Node** head_ref) {
        /* dereference head_ref to get the real head */
        Node* current = *head_ref;
        Node* next = NULL;

        while (current != NULL) {
            next = current->next;
            free(current);
            current = next;
        }

        /* dereference head_ref to affect the real head back in the caller */
        *head_ref = NULL;
    }
```

Finding the length of a Linked List
Iterative Method:
    1.) Initialize count as 0
    2.) Initialize a node pointer, current = head
    3.) Do following while current is not NULL
        a.) current = current->next
        b.) count++
    4.) Return count

Recursive Method:
    1.) If head is NULL, return 0
    2.) Else return 1 + getCount(head->next)

Searching for an element in a linked list (boolean)
Iterative Method:
    1.) Initialize a node pointer, current = head
    2.) Do following while current is not NULL
        a.) current->key is equal to the key being searched return true
        b.) current = current->next
    3.) Return false

Recursive Method:
    1.) If head is NULL, return false
    2.) If head's key is same as x, return true
    3.) Else retrn search(head->next, x)