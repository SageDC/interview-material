Depth First Search (DFS) is a recursive algorithm that uses the idea of backtracking.
- Backtrack - when you are moving forward and there are no mroe nodes along the current path, you move backwards on the same path to find nodes to traverse
    - all nodes will be visited on the current path till all the unvisited nodes have been traversed after which the next path will be selected.
- Recursion can be implemented using stacks
    - Pick a starting node and push all its adjacent nodes into a stacks
    - Pop a node from stack to select the next node to visit and push all its adjacent nodes into a stack.
    - Repeat this process until the stack is empty.
        - Ensure that the nodes that are visited are marked thus preventing you from visiting the same node more than once.
        - Otherwise you can end up in an infinite loop

Pseudocode:
    Iterative:
        DFS(G, s): // Where G is a graph and s is source vertex
            
            let S be stack
            S.push(s) // Inserting s in stack
            
            mark s as visited
            while(S is not empty):
                // Pop a vertex from stack to visit next
                v = S.top
                S.pop()
                // Push all the neighbors of v in stack that are not visited
                for all neighbors w of v in Graph G:
                    if w is not visited:
                        S.push(w)
                        mark w as visited

    Recursive:
        DFS(G, s):
            mark s as visited
            for all neighbors w of s in Graph G:
                if w is not visited:
                    DFS(G, w)

Time Complexity: 0(V + E) when implemented using an adjacency list

